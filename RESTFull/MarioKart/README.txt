IL PROGETTO MARIOKART è STATO SVILLUPPATO CON UNA TECNOLOGGIA TRETIER CON UN DB RELAZIONALE CHE SCAMBIA INFORMAZIONI 
TRAMITE UN EF C# SENZA IL SUPPORTO DEL TOOL DEL FRAMEWORK IN GRADO DI FARELO SCAFFOLDING AUTOMATICO.
è STATO GESTITO UN CONTEXT CHE PERMETTE TUTTAVIA LA CONNESSIONE AL DB IN MODO SEMPLICE E PIù EFFICIENTE 
(IL PROGRAMMATORE NON SI DEVE PIù OCCUPARE DELLA CONNESSIONE CHE è GESTITA IN AUTOMATICO, 
Nè SI DEVE PREOCCUPARE DI GESTIRE ERRORI DI CONNESSIONE.)
CON QUESTO APPROCCIO IL FOCUS DELLO SVILUPPATORE SI CONCENTRA SULLA LOGICA DI BUSINESS.
UNA VOLTA CREATI I MODELS ABBIAMO UTILIZZATO UNA INTERFACCIA REPOSITORY PER DISTACCARE L'IMPLEMENTAZIONE DEL SERVER DAL DB (FACADE)
UNA VOLTA CREATE LE IMPLEMENTAZIONI DELLA MIA REPO (LE FIRME COMPRENDONO INFATTI LE CLASSICHE CRUD 
(SI RENDE L'INTERFACCIA QUANTO PIù APPLICABBILE A TUTTE LE MIE ENTITà/TABLE. IN CASO DI NECESSITà SI CREANO PIù INTERFACCE CON RUOLI DIVERSI
PER I PRINCIPI SOLID)) LE ABBIAMO INNIETTATE E PER POTERLO FARE ABBIAMO DOVUTO CONFIGURARE IL BINDING DAL MIO CONTEXT 
IN MODO TALE CHE ALL'AVVIO IL MIDDLEWARE INNIETTASSE PER LO SVILUPPATORE LE REPO
POI ABBIAMO SVILUPPATO I SERVICES CHE SI SONO ACCUPATI DELLA MIA LOGICA DI BUSINESS E I CONTROLLER CHE HANNO LE FIRME CON SOPRA TAG HTTP 
DI TIPO REST. IL FINE INFATTI ERA QUELLO DI SVILUPPARE UN'APPLICAZIONE RESTFULL


LATO ANGULAR HO CERCATO DI PORTARE QUANTO PIù POSSIBILE LA MIA LOGICA DI BUSINESS REALIZZANDO DUE CONPONENT: UNO PER IL LOGIN 
CHE EFFETTUA UNA FETCH POST E UNA VIEW LISTA CHE MI FA VEDERE TUTTI I POSSIBILI PERSONAGGI CHE L'UTENTE PUò SCHEGLIERE CHE PRENDE I DATI TRAMITE UNA GET 
LI FA SCEGLIERE SECONDO LA LOGICA DEL GIOCO E LI INSERISCE NEL DB CON UN ALTRA POST


TRACCIA:
Sviluppare un'applicazione che permetta di creare un torneo di Mario Kart. Nel torneo sono presenti tre squadre, ognuna corrispondente a un utente. Ogni squadra è composta da tre personaggi, uno per ogni categoria di gara: 50cc, 100cc e 150cc.
Ogni personaggio ha un costo in crediti, che varia da 1 a 4, e ogni giocatore dispone di un budget di 10 crediti massimi per la formazione della sua squadra.
I personaggi vengono assegnati in base al giocatore utente che li sceglie per primo.
 
 
°Local Storage su Angular.
°REST API in EF con approccio manuale.
